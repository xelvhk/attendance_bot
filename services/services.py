import sqlite3
from datetime import datetime, timedelta,timezone
import random

WORKDAY_DURATION_MINUTES = 8 * 60 + 30  # 510 –º–∏–Ω—É—Ç
SPB = timezone(timedelta(hours=3))
def start_record():
    conn = sqlite3.connect('/data/attendance.db')
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS attendance (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        arrival_time TEXT,
        departure_time TEXT,
        status TEXT DEFAULT NULL,
        custom_duration_minutes INTEGER DEFAULT NULL
        )
    ''')

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–∏—Ö–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def record_arrival(user_id):
    conn = sqlite3.connect('/data/attendance.db')
    cursor = conn.cursor()

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞
    cursor.execute('''
        INSERT INTO attendance (user_id, arrival_time)
        VALUES (?, ?)
    ''', (user_id, datetime.now(SPB).strftime('%Y-%m-%d %H:%M:%S')))

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —É—Ö–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def record_departure(user_id):
    conn = sqlite3.connect('/data/attendance.db')
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—Ö–æ–¥–∞
    cursor.execute('''
        UPDATE attendance
        SET departure_time = ?
        WHERE user_id = ? AND departure_time IS NULL
    ''', (datetime.now(SPB).strftime('%Y-%m-%d %H:%M:%S'), user_id))

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
def get_stats(user_id, mode):
    now = datetime.now()
    today = now.date()

    if mode == "week":
        start = today - timedelta(days=today.weekday())  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    elif mode == "month":
        start = today.replace(day=1)  # –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
    else:
        raise ValueError("mode must be 'week' or 'month'")

    conn = sqlite3.connect("/data/attendance.db")
    cursor = conn.cursor()

    cursor.execute("""
        SELECT arrival_time, departure_time, status, custom_duration_minutes
        FROM attendance
        WHERE user_id = ?
        AND DATE(COALESCE(arrival_time, departure_time)) >= ?
        ORDER BY COALESCE(arrival_time, departure_time)
    """, (user_id, start.isoformat()))

    data = cursor.fetchall()
    conn.close()
    return data


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏
def format_stats(data):
    from datetime import datetime, timedelta
    from collections import OrderedDict

    SPB = timedelta(hours=3)
    result = ""
    total_time = timedelta()
    days_counted = set()

    records_by_day = OrderedDict()

    emoji_map = {
        '–û—Ç–ø—É—Å–∫': 'üèñ',
        '–°–≤–æ–π —Å—á—ë—Ç': 'üí∏',
        '–£–í–¶': 'üõë',
        '–£–í–°': '‚è≥',
        '–∫–æ—Ä–æ—Ç–∫–∏–π': '‚è≥'
    }

    for arrival_str, departure_str, status, custom_minutes in data:
        try:
            if arrival_str:
                day = (datetime.fromisoformat(arrival_str) + SPB).date()
            elif departure_str:
                day = (datetime.fromisoformat(departure_str) + SPB).date()
            else:
                continue
        except:
            continue

        # üè∑ –°—Ç–∞—Ç—É—Å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if status in emoji_map:
            display = f"{emoji_map[status]} {status}"
            duration = timedelta(minutes=custom_minutes) if custom_minutes else None
            records_by_day[day] = (display, duration)
            if duration:
                total_time += duration
                days_counted.add(day)
            continue

        # üïí –í—Ä—É—á–Ω—É—é —Å duration
        if custom_minutes:
            duration = timedelta(minutes=int(custom_minutes))
            display = f"{emoji_map.get(status, '‚è≥')} {duration} (–≤—Ä—É—á–Ω—É—é)"
            records_by_day[day] = (display, duration)
            total_time += duration
            days_counted.add(day)
            continue

        # ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–∏—Ö–æ–¥/—É—Ö–æ–¥
        if arrival_str and departure_str:
            try:
                arrival = datetime.fromisoformat(arrival_str) + SPB
                departure = datetime.fromisoformat(departure_str) + SPB
                duration = departure - arrival
                records_by_day[day] = (str(duration), duration)
                total_time += duration
                days_counted.add(day)
            except:
                continue

    for day, (display, duration) in records_by_day.items():
        result += f"{day.strftime('%d.%m.%Y')}: {display}\n"

    expected_time = timedelta(hours=8, minutes=30) * len(days_counted)
    delta = total_time - expected_time

    result += f"\n<b>–í—Å–µ–≥–æ: {total_time} / –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_time}</b>\n"
    if delta.total_seconds() > 0:
        result += f"‚úÖ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞: {delta}\n"
    elif delta.total_seconds() < 0:
        result += f"‚ö†Ô∏è –ù–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∞: {-delta}\n"
    else:
        result += "‚úÖ –í—Å—ë —Ç–æ—á–Ω–æ –ø–æ –ø–ª–∞–Ω—É!\n"

    return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ 8.5 —á–∞—Å–æ–≤ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def record_manual_hours(user_id):
    conn = sqlite3.connect('/data/attendance.db')
    cursor = conn.cursor()
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞
    arrival_time = datetime.now(SPB)
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ (—á–µ—Ä–µ–∑ 8.5 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞)
    departure_time = arrival_time + timedelta(hours=8, minutes=30)
    cursor.execute("""
        DELETE FROM attendance
        WHERE user_id = ? AND DATE(COALESCE(arrival_time, departure_time)) = ?
        """, (user_id, arrival_time.date()))
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ 8.5 —á–∞—Å–∞–º–∏
    cursor.execute('''
        INSERT INTO attendance (user_id, arrival_time, departure_time)
        VALUES (?, ?, ?)
    ''', (user_id, arrival_time.strftime('%Y-%m-%d %H:%M:%S'), departure_time.strftime('%Y-%m-%d %H:%M:%S')))

    conn.commit()
    conn.close()


def get_random_sticker(sticker_list):
    return random.choice(sticker_list)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤—Ä—É—á–Ω—É—é
def add_manual_entry(user_id, date_str, arrival_str, departure_str):
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    try:
        arrival_time = datetime.strptime(f"{date_str} {arrival_str}", "%Y-%m-%d %H:%M:%S")
        departure_time = datetime.strptime(f"{date_str} {departure_str}", "%Y-%m-%d %H:%M:%S")
    except ValueError:
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: Y-m-d H:M:S"
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('/data/attendance.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id FROM attendance
        WHERE user_id = ? AND arrival_time = ?
    ''', (user_id, arrival_time))
    existing_record = cursor.fetchone()
    
    if existing_record:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute('''
            UPDATE attendance
            SET arrival_time = ?, departure_time = ?
            WHERE id = ?
        ''', (arrival_time.strftime('%Y-%m-%d %H:%M:%S'),
              departure_time.strftime('%Y-%m-%d %H:%M:%S'),
              existing_record[0]))
        conn.commit()
        conn.close()
        return "–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        cursor.execute('''
            INSERT INTO attendance (user_id, arrival_time, departure_time)
            VALUES (?, ?, ?)
        ''', (user_id,
              arrival_time.strftime('%Y-%m-%d %H:%M:%S'),
              departure_time.strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()
        conn.close()
        return "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
 
def get_monthly_records(user_id):
    conn = sqlite3.connect('/data/attendance.db')
    cursor = conn.cursor()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    now = datetime.now(SPB)
    start_of_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    end_of_month = (start_of_month + timedelta(days=32)).replace(day=1) - timedelta(seconds=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏—Ö–æ–¥–µ –∏ —É—Ö–æ–¥–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    cursor.execute('''
        SELECT arrival_time, departure_time FROM attendance
        WHERE user_id = ? AND
              arrival_time BETWEEN ? AND ? AND
              departure_time IS NOT NULL
    ''', (user_id, start_of_month, end_of_month))
    
    records = cursor.fetchall()
    conn.close()
    return records
def calculate_monthly_balance(user_id):
    records = get_monthly_records(user_id)
    total_minutes = 0  # –°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç
    
    for arrival_str, departure_str in records:
        arrival_time = datetime.strptime(arrival_str, '%Y-%m-%d %H:%M:%S')
        departure_time = datetime.strptime(departure_str, '%Y-%m-%d %H:%M:%S')
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å
        work_duration = (departure_time - arrival_time).total_seconds() / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        total_minutes += work_duration - WORKDAY_DURATION_MINUTES  # –†–∞–∑–Ω–∏—Ü–∞ —Å –Ω–æ—Ä–º–æ–π
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–∏–Ω—É—Ç—ã –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
    hours, minutes = divmod(int(total_minutes), 60)
    
    if total_minutes > 0:
        return f"–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
    elif total_minutes < 0:
        return f"–ù–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∞ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {abs(hours)} —á–∞—Å–æ–≤ {abs(minutes)} –º–∏–Ω—É—Ç"
    else:
        return "–í—Å–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É!"