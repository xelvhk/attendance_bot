from datetime import datetime, timedelta
from typing import List, Dict, Tuple
from collections import defaultdict

from .attendance_service import AttendanceRecord
from .config_services import SPB, STATUS_EMOJIS, WORKDAY_DURATION_MINUTES


class StatsService:
    
    @staticmethod
    def calculate_work_duration(record: AttendanceRecord) -> Tuple[timedelta, timedelta]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
        # Vacation and personal days - no work required, no debt
        if record.status in ['–û—Ç–ø—É—Å–∫', '–°–≤–æ–π —Å—á—ë—Ç']:
            return timedelta(), timedelta()
        
        # Full leave (–£–í–¶) - creates debt of full workday
        if record.status == '–£–í–¶':
            return timedelta(), timedelta(hours=8, minutes=30)  # 0 worked, 8.5 expected = debt
        
        # Partial leave (–£–í–°) - creates debt for the leave hours
        if record.status == '–£–í–°' and record.custom_duration_minutes:
            # User worked some hours, but took leave for remaining time
            worked = timedelta(minutes=record.custom_duration_minutes)
            expected = timedelta(hours=8, minutes=30)  # Still need to work full day
            return worked, expected
        
        # Short day with custom duration
        if record.status == '–∫–æ—Ä–æ—Ç–∫–∏–π' and record.custom_duration_minutes:
            worked = timedelta(minutes=record.custom_duration_minutes)
            expected = worked  # For short days, expected equals worked
            return worked, expected
        
        # Regular workday
        if record.arrival_time and record.departure_time:
            arrival = datetime.fromisoformat(record.arrival_time).replace(tzinfo=SPB)
            departure = datetime.fromisoformat(record.departure_time).replace(tzinfo=SPB)
            worked = departure - arrival
            expected = timedelta(hours=8, minutes=30)
            return worked, expected
        
        return timedelta(), timedelta()
    
    @staticmethod
    def format_duration(td: timedelta) -> str:
        """–î–µ–ª–∞–µ—Ç –≤—Ä–µ–º—è —á–∏—Ç–∞–µ–º—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º."""
        if td.total_seconds() == 0:
            return "0:00:00"
        
        hours, remainder = divmod(int(td.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{hours}:{minutes:02d}:{seconds:02d}"
    
    @staticmethod
    def format_record_display(record: AttendanceRecord) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –≤—ã–≤–æ–¥–∞."""
        date_str = record.date.strftime('%d.%m.%Y')
        
        # Vacation and personal days
        if record.status in ['–û—Ç–ø—É—Å–∫', '–°–≤–æ–π —Å—á—ë—Ç'] and record.status in STATUS_EMOJIS:
            emoji = STATUS_EMOJIS[record.status]
            return f"{date_str}: {emoji} {record.status}"
        
        # Full leave (–£–í–¶) - shows debt
        if record.status == '–£–í–¶':
            emoji = STATUS_EMOJIS.get(record.status, 'üõë')
            return f"{date_str}: {emoji} {record.status} (–Ω–∞–¥–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å: 8:30:00)"
        
        # Partial leave (–£–í–°) - shows worked time and remaining debt
        if record.status == '–£–í–°' and record.custom_duration_minutes:
            emoji = STATUS_EMOJIS.get(record.status, '‚è≥')
            worked = timedelta(minutes=record.custom_duration_minutes)
            debt = timedelta(hours=8, minutes=30) - worked
            return f"{date_str}: {emoji} –†–∞–±–æ—Ç–∞–ª {StatsService.format_duration(worked)}, –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥–æ: {StatsService.format_duration(debt)} (–£–í–°)"
        
        # Short day
        if record.status == '–∫–æ—Ä–æ—Ç–∫–∏–π' and record.custom_duration_minutes:
            emoji = STATUS_EMOJIS.get(record.status, '‚è≥')
            duration = timedelta(minutes=record.custom_duration_minutes)
            return f"{date_str}: {emoji} {StatsService.format_duration(duration)} (–∫–æ—Ä–æ—Ç–∫–∏–π –¥–µ–Ω—å)"
        
        # Regular workday
        worked, _ = StatsService.calculate_work_duration(record)
        return f"{date_str}: {StatsService.format_duration(worked)}"
    
    @staticmethod
    def calculate_period_stats(records: List[AttendanceRecord]) -> Tuple[str, timedelta, timedelta]:
        """–ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥."""
        if not records:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.", timedelta(), timedelta()
        
        result_lines = []
        total_work = timedelta()
        total_expected = timedelta()
        
        for record in records:
            result_lines.append(StatsService.format_record_display(record))
            worked, expected = StatsService.calculate_work_duration(record)
            total_work += worked
            total_expected += expected
        
        result = "\n".join(result_lines)
        return result, total_work, total_expected
    
    @staticmethod
    def format_balance(total_work: timedelta, total_expected: timedelta) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
        delta = total_work - total_expected
        
        if delta.total_seconds() > 0:
            return f"<b>‚úÖ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞: {StatsService.format_duration(delta)}</b>"
        elif delta.total_seconds() == 0:
            return "<b>‚úÖ –í—Å—ë —á—ë—Ç–∫–æ</b>"
        else:
            return f"<b>‚ö†Ô∏è –ù–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∞: {StatsService.format_duration(-delta)}</b>"
    
    @staticmethod
    def generate_week_stats(records: List[AttendanceRecord]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é."""
        if not records:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é."
        
        result = "<b>üìä –†–∞–±–æ—á–∞—è –Ω–µ–¥–µ–ª—è:</b>\n"
        stats, total_work, total_expected = StatsService.calculate_period_stats(records)
        result += stats + "\n\n"
        result += StatsService.format_balance(total_work, total_expected)
        
        return result
    
    @staticmethod
    def generate_month_stats(records: List[AttendanceRecord]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü."""
        if not records:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü."
        
        # Get current month name
        current_month = datetime.now(SPB).strftime('%B %Y')
        result = f"<b>üìÜ {current_month}</b>\n"
        
        stats, total_work, total_expected = StatsService.calculate_period_stats(records)
        result += stats + "\n\n"
        result += StatsService.format_balance(total_work, total_expected)
        
        return result
    
    @staticmethod
    def generate_all_stats(records: List[AttendanceRecord]) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è."""
        if not records:
            return ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."]
        
        monthly_data = defaultdict(list)
        
        # Group records by month
        for record in records:
            month_key = record.date.strftime("%B %Y")
            monthly_data[month_key].append(record)
        
        results = []
        for month, month_records in monthly_data.items():
            result = f"<b>{month}</b>\n"
            stats, total_work, total_expected = StatsService.calculate_period_stats(month_records)
            result += stats + "\n"
            result += StatsService.format_balance(total_work, total_expected)
            results.append(result.strip())
        
        return results
    
    @staticmethod
    def calculate_monthly_balance(records: List[AttendanceRecord]) -> str:
        """–í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –º–µ—Å—è—Ü."""
        total_work, total_expected = timedelta(), timedelta()
        
        for record in records:
            worked, expected = StatsService.calculate_work_duration(record)
            total_work += worked
            total_expected += expected
        
        delta = total_work - total_expected
        delta_minutes = int(delta.total_seconds() / 60)
        hours, minutes = divmod(abs(delta_minutes), 60)
        
        if delta_minutes > 0:
            return f"–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
        elif delta_minutes < 0:
            return f"–ù–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∞ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
        else:
            return "–í—Å–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É!"
