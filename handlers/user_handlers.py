from aiogram import Bot, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from datetime import datetime
import sqlite3
import re
from keyboards.keyboards import yatut_kb
from lexicon.lexicon_ru import LEXICON_RU
from services.services import record_arrival, record_departure, start_record, get_stats, format_stats, record_manual_hours, get_random_sticker, add_manual_entry, calculate_monthly_balance
from datetime import timedelta, timezone
from collections import defaultdict
router = Router()
bot = Bot
SPB = timedelta(hours=3)
# ID —Å—Ç–∏–∫–µ—Ä–æ–≤
STICKER_ARRIVED = ['CAACAgIAAxkBAAEI3cFm-wxyyOtvqI94tfrsref6_vwaFQACgQADBL0eGX0AATUSNQ505jYE',
                   'CAACAgIAAxkBAAEI3b9m-wwZr8UwSWMVmiBBLc8UMcOOeAACUQADaJpdDO_0j_QyLokTNgQ',
                   'CAACAgIAAxkBAAEI9AZm__ihfUi2-LBZdFiVzda0IY4PngACFQADaJpdDHRGO4k8qzJQNgQ',
                   'CAACAgIAAxkBAAEI9Ahm__kM-5T1cpLhW0iuOY2MG-Ih6gACCQIAApmYRhHu7C34bJoF1TYE',
                   'CAACAgIAAxkBAAEI9Apm__k5sV9yawtbXHuHm-rlNV-r2QACwAADaJpdDGzvGdYfOiFPNgQ',
                   'CAACAgIAAxkBAAEI9BBm__mLf4jgT_cV8CB_7kIHmufSsAACQhUAAvodeUsKTTuYgTFABjYE',
                   'CAACAgIAAxkBAAEI9BJm__m0Bkb2pucPPUJfj7Y_XNxsJQACURsAAh2yeUvKd43ZfiKSeDYE'
                   ]  # –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä "–ü—Ä–∏—à–µ–ª"
STICKER_DEPARTED = ['CAACAgIAAxkBAAEI3cNm-wylDrxF8qq1MRBSgZLjGrj65wACcQADBL0eGQ8rdMjS1JRXNgQ',
                    'CAACAgIAAxkBAAEI9BRm__naLKtp9G7kStDSLqXNZcaIQQACJwADaJpdDJBThnLCPeeYNgQ',
                    'CAACAgIAAxkBAAEI9BZm__nlqyfDLwrgC4kQFE4x_t6xkgACYgADaJpdDJ9PJNArZRlvNgQ',
                    'CAACAgIAAxkBAAEI9Bhm__ouLMBgRuHXoOf7ikmaW5xmHAAC-xoAAhoqIEoODNQzL8kL1TYE',
                    'CAACAgIAAxkBAAEI9Bxm__pAMKcvRwHjgrPVy-KFzuHAQQACfhUAAhMlGUnK7ezMNhIY0jYE',
                    'CAACAgIAAxkBAAEI9B5m__pPN56qnZMMoQLKf4VO-bfIMQAC7hIAArHhgUvaP9zgZv1VOTYE',
                    'CAACAgIAAxkBAAEI9CZm__skePjUlK_lOY4_U3fzk9Le4wACWwADBL0eGUCGJ_KiQaqKNgQ'
                    ] # –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä "–£—à–µ–ª"
STICKER_MK = ['CAACAgIAAxkBAAEI3ctm-w96eM7IcAABjlqtItZEJu35ERIAAoAAA2iaXQykBJQoEKRMJzYE',
              'CAACAgIAAxkBAAEI9CJm__pxAQ_wnWgDitXQCXc8parULwAChgEAApmYRhF6rwotSDTotTYE',
              'CAACAgIAAxkBAAEI9CRm__qR-wAB5JwiRpr_G1Gv-68sXnkAArEAA2iaXQz-8JEfBeLuSDYE',
              'CAACAgIAAxkBAAEI9Cpm__tXELXoejI7Hx6CHf1kukqT4QACxzMAAln1gUhRishsNZeQlDYE',
              'CAACAgIAAxkBAAEI9C5m__uVk_4fo0_xkiQAAR3vUF8zK70AAgIBAAJWnb0KTuJsgctA5P82BA',
              'CAACAgIAAxkBAAEI9DBm__u8WmVrsYtmG2ySC5MElDR0IwACcQEAApmYRhGsKWEWWLL5djYE',
              'CAACAgIAAxkBAAEI9DJm__va-naeXrz0pL2jp3EhEdGLAgACVQADaJpdDPrD__zHs5XmNgQ'
              ] # –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä "MK"

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def process_start_command(message: Message):
    start_record()
    await message.answer(text=LEXICON_RU['/start'],
                         reply_markup=yatut_kb)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(text=LEXICON_RU['/help'])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Ö–æ–¥–∞
@router.message(F.text.in_([LEXICON_RU['answers']['tut']]))
async def arrived(message: Message):
    user_id = message.from_user.id
    record_arrival(user_id)
    await message.reply("–û—Ç–º–µ—Ç–∏–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞!")
    await message.reply_sticker(get_random_sticker(STICKER_ARRIVED))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ö–æ–¥–∞
@router.message(F.text.in_([LEXICON_RU['answers']['netut']]))
async def departed(message: Message):
    user_id = message.from_user.id
    record_departure(user_id)
    await message.reply("–û—Ç–º–µ—Ç–∏–ª–∏ –≤—Ä–µ–º—è —É—Ö–æ–¥–∞!")
    await message.reply_sticker(get_random_sticker(STICKER_DEPARTED))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–ö"
@router.message(F.text.in_([LEXICON_RU['answers']['mk']]))
async def manual_hours(message: Message):
    user_id = message.from_user.id
    record_manual_hours(user_id)
    await message.reply("–ó–∞–ø–∏—Å–∞–Ω—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 8.5 —á–∞—Å–æ–≤ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è.")
    await message.reply_sticker(get_random_sticker(STICKER_MK)) 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–í–¶"
@router.message(F.text.in_([LEXICON_RU['answers']['uvc']]))
async def full_leave(message: Message):
    user_id = message.from_user.id
    now = datetime.now(timezone(timedelta(hours=3)))

    conn = sqlite3.connect("/data/attendance.db")
    cursor = conn.cursor()

    cursor.execute("""
    DELETE FROM attendance
    WHERE user_id = ? AND DATE(COALESCE(arrival_time, departure_time)) = ?
    """, (user_id, now.date()))

    cursor.execute("""
    INSERT INTO attendance (user_id, status, arrival_time)
    VALUES (?, ?, ?)
    """, (user_id, '–£–í–¶', now.isoformat()))

    conn.commit()
    conn.close()

    await message.answer("üü¢ –£–≤–æ–ª—å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞ –¥–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¶–µ–ª—ã–π –¥–µ–Ω—å –±–µ–∑ —Ä–∞–±–æ—Ç—ã, —É—Ö!")
    await message.reply_sticker(get_random_sticker(STICKER_MK)) 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–íC"
@router.message(lambda message: message.text.lower().startswith("—É–≤—Å"))
async def short_leave(message: Message):
    user_id = message.from_user.id
    now = datetime.now(timezone(timedelta(hours=3)))

    try:
        parts = message.text.strip().split()
        hours = float(parts[1])  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "–£–í–° 2"
        duration = int(hours * 60)
    except:
        await message.answer("–£–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–ª —Å —É–≤–æ–ª—å–Ω–∏—Ç–µ–ª—å–Ω–æ–π: –Ω–∞–ø—Ä–∏–º–µ—Ä, '–£–í–° 6'")
        return

    conn = sqlite3.connect("/data/attendance.db")
    cursor = conn.cursor()

    cursor.execute("""
    DELETE FROM attendance
    WHERE user_id = ? AND DATE(COALESCE(arrival_time, departure_time)) = ?
    """, (user_id, now.date()))

    cursor.execute("""
    INSERT INTO attendance (user_id, status, custom_duration_minutes, arrival_time)
    VALUES (?, ?, ?, ?)
    """, (user_id, '–£–í–°', duration, now.isoformat()))

    conn.commit()
    conn.close()

    await message.answer(f"üü† –¢–µ–ø–µ—Ä—å –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å {8.5-hours} —á.")
    await message.reply_sticker(get_random_sticker(STICKER_MK)) 



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞ —Å–≤–æ–π —Å—á—ë—Ç"
@router.message(F.text.in_([LEXICON_RU['answers']['one_day']]))
async def pay_day(message: Message):
    user_id = message.from_user.id
    now = datetime.now(timezone(timedelta(hours=3)))

    conn = sqlite3.connect("/data/attendance.db")
    cursor = conn.cursor()

    cursor.execute("""
    DELETE FROM attendance
    WHERE user_id = ? AND DATE(COALESCE(arrival_time, departure_time)) = ?
    """, (user_id, now.date()))

    cursor.execute("""
    INSERT INTO attendance (user_id, status, arrival_time)
    VALUES (?, ?, ?)
    """, (user_id, '–°–≤–æ–π —Å—á—ë—Ç', now.isoformat()))

    conn.commit()
    conn.close()

    await message.answer("–ú–∏–Ω—É—Å –∑–∞—Ä–ø–ª–∞—Ç–∞ :(")
    await message.reply_sticker(get_random_sticker(STICKER_MK))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π"
@router.message(lambda message: message.text.lower().startswith("—É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π"))
async def short_day(message: Message):
    user_id = message.from_user.id
    now = datetime.now(timezone(timedelta(hours=3)))

    try:
        parts = message.text.strip().split()
        hours = float(parts[1])  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "—É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π 2"
        duration = int(hours * 60)
    except:
        await message.answer("–£–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –∏—Ç–æ–≥–µ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—à—å: –Ω–∞–ø—Ä–∏–º–µ—Ä, '—É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π 7'")
        return

    conn = sqlite3.connect("/data/attendance.db")
    cursor = conn.cursor()

    cursor.execute("""
    DELETE FROM attendance
    WHERE user_id = ? AND DATE(COALESCE(arrival_time, departure_time)) = ?
    """, (user_id, now.date()))

    cursor.execute("""
    INSERT INTO attendance (user_id, status, custom_duration_minutes, arrival_time)
    VALUES (?, ?, ?, ?)
    """, (user_id, '–∫–æ—Ä–æ—Ç–∫–∏–π', duration, now.isoformat()))

    conn.commit()
    conn.close()

    await message.answer(f"üü¢ –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π –¥–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await message.reply_sticker(get_random_sticker(STICKER_MK)) 


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—É—Å–∫"
@router.message(F.text.in_([LEXICON_RU['answers']['holidays']]))
async def holiday(message: Message):
    user_id = message.from_user.id
    now = datetime.now(timezone(timedelta(hours=3)))

    conn = sqlite3.connect("/data/attendance.db")
    cursor = conn.cursor()

    cursor.execute("""
    DELETE FROM attendance
    WHERE user_id = ? AND DATE(COALESCE(arrival_time, departure_time)) = ?
    """, (user_id, now.date()))

    cursor.execute("""
    INSERT INTO attendance (user_id, status, arrival_time)
    VALUES (?, ?, ?)
    """, (user_id, '–û—Ç–ø—É—Å–∫', now.isoformat()))

    conn.commit()
    conn.close()

    await message.answer("–£—Ä–∞! –û—Ç–ø—É—Å–∫!")
    await message.reply_sticker(get_random_sticker(STICKER_MK)) 


@router.message(F.text.in_([LEXICON_RU['week']]))
async def week_stats(message: Message):
    user_id = message.from_user.id

    today = datetime.now(timezone(SPB))
    start_of_week = today - timedelta(days=today.weekday())  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    end_of_week = start_of_week + timedelta(days=4)          # –ü—è—Ç–Ω–∏—Ü–∞

    conn = sqlite3.connect("/data/attendance.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT arrival_time, departure_time, status, custom_duration_minutes
        FROM attendance
        WHERE user_id = ?
        AND DATE(COALESCE(arrival_time, departure_time)) BETWEEN ? AND ?
        ORDER BY COALESCE(arrival_time, departure_time)
    """, (user_id, start_of_week.date(), end_of_week.date()))
    data = cursor.fetchall()
    conn.close()

    if not data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.")
        return

    result = "<b>üìä –†–∞–±–æ—á–∞—è –Ω–µ–¥–µ–ª—è:</b>\n"
    total_work = timedelta()
    total_expected = timedelta()

    for arrival_str, departure_str, status, custom_duration in data:
        try:
            date = datetime.fromisoformat(arrival_str or departure_str) + SPB if arrival_str or departure_str else today
            day_str = date.strftime('%d.%m.%Y')

            if status in ['–û—Ç–ø—É—Å–∫', '–°–≤–æ–π —Å—á—ë—Ç', '–£–í–¶']:
                result += f"{day_str}: {status}\n"
                continue

            if status == '–∫–æ—Ä–æ—Ç–∫–∏–π' and custom_duration:
                worked = timedelta(minutes=custom_duration)
                expected = worked
                total_work += worked
                total_expected += expected
                result += f"{day_str}: {str(worked)} (–∫–æ—Ä–æ—Ç–∫–∏–π)\n"
                continue

            if status == '–£–í–°' and custom_duration:
                # –û—Ç—Ä–∞–±–æ—Ç–∞–ª –º–µ–Ω—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ
                worked = timedelta(minutes=custom_duration)
                expected = timedelta(hours=8, minutes=30)
                total_work += worked
                total_expected += expected
                result += f"{day_str}: {str(worked)} (–£–í–°)\n"
                continue

            if arrival_str and departure_str:
                arrival = datetime.fromisoformat(arrival_str) + SPB
                departure = datetime.fromisoformat(departure_str) + SPB
                worked = departure - arrival
                expected = timedelta(hours=8, minutes=30)
                total_work += worked
                total_expected += expected
                result += f"{arrival.date().strftime('%d.%m.%Y')}: {str(worked)}\n"

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            continue

    delta = total_work - total_expected
    if delta.total_seconds() > 0:
        result += f"\n<b>‚úÖ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: {str(delta)}</b>"
    elif delta.total_seconds() == 0:
        result += "\n<b>‚úÖ –í—Å—ë —á—ë—Ç–∫–æ</b>"
    else:
        result += f"\n<b>‚ö†Ô∏è –ù–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∞: {str(-delta)}</b>"

    await message.answer(result, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"
@router.message(F.text.in_([LEXICON_RU['month']]))
async def month_stats(message: Message):
    user_id = message.from_user.id

    today = datetime.now(timezone(SPB))
    start_of_month = today.replace(day=1)

    conn = sqlite3.connect("/data/attendance.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT arrival_time, departure_time, status, custom_duration_minutes
        FROM attendance
        WHERE user_id = ?
        AND DATE(COALESCE(arrival_time, departure_time)) >= ?
        ORDER BY COALESCE(arrival_time, departure_time)
    """, (user_id, start_of_month.date()))
    data = cursor.fetchall()
    conn.close()

    if not data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
        return

    result = f"<b>üìÜ {today.strftime('%B %Y')}</b>\n"
    total_work = timedelta()
    total_expected = timedelta()

    for arrival_str, departure_str, status, custom_duration in data:
        try:
            date = datetime.fromisoformat(arrival_str or departure_str) + SPB if arrival_str or departure_str else today
            day_str = date.strftime('%d.%m.%Y')

            if status in ['–û—Ç–ø—É—Å–∫', '–°–≤–æ–π —Å—á—ë—Ç', '–£–í–¶']:
                result += f"{day_str}: {status}\n"
                continue

            if status == '–∫–æ—Ä–æ—Ç–∫–∏–π' and custom_duration:
                worked = timedelta(minutes=custom_duration)
                expected = worked  # –¥–µ–Ω—å —É–∫–æ—Ä–æ—á–µ–Ω, –∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –Ω–∞–¥–æ
                total_work += worked
                total_expected += expected
                result += f"{day_str}: {str(worked)} (–∫–æ—Ä–æ—Ç–∫–∏–π)\n"
                continue

            if status == '–£–í–°' and custom_duration:
                worked = timedelta(minutes=custom_duration)
                expected = timedelta(hours=8, minutes=30)  # –Ω–æ—Ä–º–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
                total_work += worked
                total_expected += expected
                result += f"{day_str}: {str(worked)} (–£–í–°)\n"
                continue

            if arrival_str and departure_str:
                arrival = datetime.fromisoformat(arrival_str) + SPB
                departure = datetime.fromisoformat(departure_str) + SPB
                worked = departure - arrival
                expected = timedelta(hours=8, minutes=30)
                total_work += worked
                total_expected += expected
                result += f"{arrival.date().strftime('%d.%m.%Y')}: {str(worked)}\n"

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Å—è—Ü–µ: {e}")
            continue

    delta = total_work - total_expected
    if delta.total_seconds() > 0:
        result += f"\n<b>‚úÖ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞: {str(delta)}</b>"
    elif delta.total_seconds() == 0:
        result += "\n<b>‚úÖ –í—Å—ë —á—ë—Ç–∫–æ</b>"
    else:
        result += f"\n<b>‚ö†Ô∏è –ù–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∞: {str(-delta)}</b>"

    await message.answer(result.strip(), parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ö–ù–û–ü–û–ß–ö–ò
@router.message(F.text.in_([LEXICON_RU['knop']]))
async def just_pull(message: Message):
    await message.reply("–ù–µ –ø–∏—à–µ–º, –∞ –∂–º—ë–º")

pattern = r"(\d{4}-\d{2}-\d{2})\s+(\d{2}:\d{2}:\d{2})-(\d{2}:\d{2}:\d{2})"
@router.message(lambda message: re.match(pattern, message.text))
async def handle_manual_entry(message: Message):
    user_id = message.from_user.id
    match = re.match(pattern, message.text)
 
    if match:
        date_str = match.group(1)         # "–¥–¥.–º–º"
        arrival_str = match.group(2)      # "—á—á:–º–º"
        departure_str = match.group(3)    # "—á—á:–º–º"
 
        response = add_manual_entry(user_id, date_str, arrival_str, departure_str)
        await message.reply(response)
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –¥–¥.–º–º —á—á:–º–º-—á—á:–º–º")

@router.message(F.text.in_([LEXICON_RU['print']]))
async def add_manual_stats(message: Message):
    await message.reply("–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–µ–π—á–∞—Å –≤ –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2024-12-31 23:58:00-23:59:00")

@router.message(F.text.in_([LEXICON_RU['check_time']]))
async def handle_time_balance(message: Message):
    user_id = message.from_user.id
    balance = calculate_monthly_balance(user_id)
    await message.reply(balance)

@router.message(F.text.in_([LEXICON_RU['all_records']]))
async def show_full_statistics(message: Message):
    user_id = message.from_user.id

    conn = sqlite3.connect("/data/attendance.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT arrival_time, departure_time, status, custom_duration_minutes
        FROM attendance
        WHERE user_id = ?
        ORDER BY COALESCE(arrival_time, departure_time)
    """, (user_id,))
    data = cursor.fetchall()
    conn.close()

    if not data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    monthly_data = defaultdict(list)

    for arrival_str, departure_str, status, custom_duration in data:
        try:
            if status in ['–û—Ç–ø—É—Å–∫', '–°–≤–æ–π —Å—á—ë—Ç', '–£–í–¶']:
                date = datetime.fromisoformat(arrival_str or departure_str) + SPB if arrival_str or departure_str else datetime.now()
                month_key = date.strftime("%B %Y")
                monthly_data[month_key].append((date.date(), status, None, None))
                continue

            if status == '–∫–æ—Ä–æ—Ç–∫–∏–π' and custom_duration:
                date = datetime.fromisoformat(arrival_str or departure_str) + SPB
                worked = timedelta(minutes=custom_duration)
                expected = worked  # –Ω–æ—Ä–º–∞ —Ç–æ–∂–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
                month_key = date.strftime("%B %Y")
                monthly_data[month_key].append((date.date(), None, worked, expected))
                continue

            if status == '–£–í–°' and custom_duration:
                date = datetime.fromisoformat(arrival_str or departure_str) + SPB
                worked = timedelta(minutes=custom_duration)
                expected = timedelta(hours=8, minutes=30)  # –Ω–æ—Ä–º–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
                month_key = date.strftime("%B %Y")
                monthly_data[month_key].append((date.date(), None, worked, expected))
                continue

            # –û–±—ã—á–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
            if arrival_str and departure_str:
                arrival = datetime.fromisoformat(arrival_str) + SPB
                departure = datetime.fromisoformat(departure_str) + SPB
                worked = departure - arrival
                expected = timedelta(hours=8, minutes=30)
                month_key = arrival.strftime("%B %Y")
                monthly_data[month_key].append((arrival.date(), None, worked, expected))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏: {e}")
            continue

    # –†–∞–∑–¥–µ–ª—ë–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    for month, records in monthly_data.items():
        result = f"<b>{month}</b>\n"
        total_work = timedelta()
        total_expected = timedelta()

        for day, status, worked, expected in records:
            if status:  # –°—Ç–∞—Ç—É—Å–Ω—ã–π –¥–µ–Ω—å
                result += f"{day.strftime('%d.%m.%Y')}: {status}\n"
            elif worked is not None:
                result += f"{day.strftime('%d.%m.%Y')}: {str(worked)}\n"
                total_work += worked
                total_expected += expected

        delta = total_work - total_expected
        if delta.total_seconds() > 0:
            result += f"<b>‚úÖ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞: {str(delta)}</b>\n"
        elif delta.total_seconds() == 0:
            result += f"<b>‚úÖ –í—Å—ë –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ—á–Ω–æ</b>\n"
        else:
            result += f"<b>‚ö†Ô∏è –ù–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∞: {str(-delta)}</b>\n"

        await message.answer(result.strip(), parse_mode='HTML')
